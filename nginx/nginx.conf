events {
    worker_connections 1024;
}

http {
    upstream app-service {
        server app-service:8000;
    }

    upstream auth-service {
        server auth-service:3000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=app:10m rate=10r/s;

    # Redirect all HTTP requests to HTTPS
    server {
        listen 80;
        server_name rust-acc.duckdns.org;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl;
        server_name rust-acc.duckdns.org;

        ssl_certificate /etc/letsencrypt/live/rust-acc.duckdns.org/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/rust-acc.duckdns.org/privkey.pem;

        # SSL Security Headers
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Route /auth to auth-service
        location /auth/ {
            rewrite ^/auth/(.*)$ /$1 break;
            proxy_pass http://auth-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Rate limiting for auth endpoints
            limit_req zone=auth burst=10 nodelay;
        }
        
        location /auth {
            return 301 $scheme://$host/auth/;
        }

        # Route /app to app-service  
        location /app/ {
            rewrite ^/app/(.*)$ /$1 break;
            proxy_pass http://app-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Rate limiting
            limit_req zone=app burst=20 nodelay;
        }
        
        location /app {
            return 301 $scheme://$host/app/;
        }

        # Default route to app-service (for root path)
        location / {
            proxy_pass http://app-service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Rate limiting
            limit_req zone=app burst=20 nodelay;
        }
    }
}