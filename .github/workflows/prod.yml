name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli -a ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

        # Cache dependencies to speed up build times
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            app-service/.cargo
            app-service/target/
            auth-service/.cargo
            auth-service/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        run: rustup update stable && rustup default stable

      - name: Build and test app-service code
        working-directory: ./app-service
        run: |
          cargo build --verbose
          cargo test --verbose

      - name: Build and test auth-service code
        working-directory: ./auth-service
        run: |
          export SQLX_OFFLINE=true
          cargo build --verbose
          cargo test --verbose

        # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/bake-action@v2.3.0
        with:
          push: true
          files: |
            compose.yml
            compose.override.yml
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install sshpass
        run: sudo apt-get install sshpass

      - name: Copy files to droplet
        run: |
          sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no compose.yml root@${{ vars.DROPLET_IP }}:~
          sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no -r nginx root@${{ vars.DROPLET_IP }}:~
          sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no init-letsencrypt.sh root@${{ vars.DROPLET_IP }}:~

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            cd ~
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            export DOMAIN=${{ vars.DOMAIN }}
            export RUN_MODE=production
            docker compose down
            docker compose pull

            # Initialize SSL certificates if they don't exist
            if [ ! -d "./certbot/conf/live/rust-acc.duckdns.org" ]; then
              chmod +x init-letsencrypt.sh
              ./init-letsencrypt.sh
            fi

            # Start services (init-letsencrypt.sh handles first run, this handles subsequent runs)
            docker compose up -d
