services:
  app-service:
    image: ryanycwdev/app-service # specify name of image on Docker Hub
    restart: "always" # automatically restart container when server crashes
    environment: # set up environment variables
      DOMAIN: ${DOMAIN}
    expose:
      - "8000" # expose port internally to other containers only
    depends_on: # only run app-service after auth-service has started
      auth-service:
        condition: service_started
    networks:
      - app-network
      
  auth-service:
    image: ryanycwdev/auth-service
    restart: "always" # automatically restart container when server crashes
    environment:
      RUN_MODE: ${RUN_MODE}
      APP_AUTH__JWT_SECRET: ${JWT_SECRET}
      APP_CORS__ALLOWED_ORIGINS: ${DOMAIN}
      APP_POSTGRES__PASSWORD: "${POSTGRES_PASSWORD}"
      APP_REDIS__PASSWORD: ${REDIS_PASSWORD}
    expose:
      - "3000" # expose port internally to other containers only
    depends_on:
      - db
      - redis
    networks:
      - app-network

  db:
    image: postgres:15.2-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app-network
  redis:
    image: redis:7.0-alpine
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    expose:
      - "6379"  # Internal only, no external ports!
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - app-network
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis-data:/data

  nginx:
    image: nginx:alpine
    restart: "always"
    ports:
      - "80:80"   # HTTP port
      - "443:443" # HTTPS port
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - app-service
      - auth-service
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app-network:
    driver: bridge 

volumes:
  db:
    driver: local
  redis-data:
    driver: local